// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())
  email             String          @unique
  password          String
  name              String
  phone             String          @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  bankAccounts      BankAccount[]   // One-to-many relationship with BankAccount
  transactionsSent  Transaction[]   @relation("SentTransactions")
  transactionsReceived Transaction[] @relation("ReceivedTransactions")
  notifications     Notification[]  // One-to-many relationship with Notification
  isAdmin           Boolean         @default(false)
}

model BankAccount {
  id          String      @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountNumber String     @unique
  bankName    String
  balance     Float        @default(0.0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Transaction {
  id          String      @id @default(uuid())
  senderId    String
  sender      User         @relation("SentTransactions", fields: [senderId], references: [id])
  receiverId  String
  receiver    User         @relation("ReceivedTransactions", fields: [receiverId], references: [id])
  amount      Float
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  type        TransactionType
}

model Notification {
  id          String      @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  message     String
  read        Boolean      @default(false)
  createdAt   DateTime     @default(now())
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum TransactionType {
  INSTANT
  SCHEDULED
  REFUND
}